package awaybuilder.animation{	import away3d.core.base.Object3D;		import awaybuilder.camera.AnimationControl;	import awaybuilder.utils.CoordinateCopy;		import gs.TweenLite;		import flash.events.EventDispatcher;				public class AnimationController extends EventDispatcher implements IAnimationController	{		protected var object : Object3D ;		protected var ease : Function ;		protected var time : Number ;		protected var source : Object3D ;		protected var target : Object3D ;		protected var _control : String = AnimationControl.INTERNAL ;						public function AnimationController ( )		{			super ( ) ;			this.source = new Object3D ( ) ;			this.target = new Object3D ( ) ;		}								////////////////////////////////////////////////////////////////////////////////		//		//	Override Methods		//		////////////////////////////////////////////////////////////////////////////////								public function animateObject ( object : Object3D , destination : Object3D , time : Number , ease : Function ) : void		{			this.prepareObjects ( object , destination , time , ease ) ;						var sx : Number = this.source.rotationX % 360 ;			var sy : Number = this.source.rotationY % 360 ;			var sz : Number = this.source.rotationZ % 360 ;			var tx : Number = this.target.rotationX % 360 ;			var ty : Number = this.target.rotationY % 360 ;			var tz : Number = this.target.rotationZ % 360 ;			var diffX : Number = Math.abs ( tx - sx ) ;			var diffY : Number = Math.abs ( ty - sy ) ;			var diffZ : Number = Math.abs ( tz - sz ) ;			var distX : Number ;			var distY : Number ;			var distZ : Number ;						diffX < 180 ? distX = diffX : distX = 360 - diffX ;			diffY < 180 ? distY = diffY : distY = 360 - diffY ;			diffZ < 180 ? distZ = diffZ : distZ = 360 - diffZ ;						// rotationX			if ( diffX < 180 )			{				if ( tx > sx ) this.target.rotationX = sx + distX ;				else if ( tx < sx ) this.target.rotationX = sx - distX ;			}			else			{				if ( tx > sx ) this.target.rotationX = sx - distX ;				else if ( tx < sx ) this.target.rotationX = sx + distX ;			}						// rotationY			if ( diffY < 180 )			{				if ( ty > sy ) this.target.rotationY = sy + distY ;				else if ( ty < sy ) this.target.rotationY = sy - distY ;			}			else			{				if ( ty > sy ) this.target.rotationY = sy - distY ;				else if ( ty < sy ) this.target.rotationY = sy + distY ;			}						// rotationZ			if ( diffZ < 180 )			{				if ( tz > sz ) this.target.rotationZ = sz + distZ ;				else if ( tz < sz ) this.target.rotationZ = sz - distZ ;			}			else			{				if ( tz > sz ) this.target.rotationZ = sz - distZ ;				else if ( tz < sz ) this.target.rotationZ = sz + distZ ;			}						this.start ( ) ;		}								public function moveObject ( object : Object3D , destination : Object3D , time : Number , ease : Function ) : void		{			this.prepareObjects ( object , destination , time , ease ) ;			this.complete ( ) ;		}								////////////////////////////////////////////////////////////////////////////////		//		//	Protected Methods		//		////////////////////////////////////////////////////////////////////////////////								protected function prepareObjects ( object : Object3D , destination : Object3D , time : Number , ease : Function ) : void		{			this.object = object ;			this.time = time ;			this.ease = ease ;			this.copyCoordinates ( object , this.source ) ;			this.copyCoordinates ( destination , this.target ) ;		}								protected function copyCoordinates ( source : Object , target : Object ) : void		{			CoordinateCopy.position ( source , target ) ;			CoordinateCopy.rotation ( source , target ) ;		}								protected function start ( ) : void		{			var properties : Object = { } ;			var startEvent : AnimationEvent = new AnimationEvent ( AnimationEvent.START ) ;						this.copyCoordinates ( this.target , properties ) ;						if ( this.control == AnimationControl.INTERNAL )			{				properties[ "ease" ] = this.ease ;				properties[ "onUpdate" ] = this.update ;				properties[ "onComplete" ] = this.complete ;				TweenLite.to ( this.object , this.time , properties ) ;			}						startEvent.data = this.object ;			this.dispatchEvent ( startEvent ) ;		}								protected function update ( ) : void		{			var updateEvent : AnimationEvent = new AnimationEvent ( AnimationEvent.UPDATE ) ;						updateEvent.data = this.object ;			this.dispatchEvent ( updateEvent ) ;		}						protected function complete ( ) : void		{			var completeEvent : AnimationEvent = new AnimationEvent ( AnimationEvent.COMPLETE ) ;						this.copyCoordinates ( this.target , this.object ) ;			completeEvent.data = this.object ;			this.dispatchEvent ( completeEvent ) ;		}								////////////////////////////////////////////////////////////////////////////////		//		//	Getters and Setters		//		////////////////////////////////////////////////////////////////////////////////								public function set control ( value : String ) : void		{			this._control = value ;		}								public function get control ( ) : String		{			return this._control ;		}	}}