package awaybuilder.utils{	import gs.easing.Back;	import gs.easing.Bounce;	import gs.easing.Circ;	import gs.easing.Cubic;	import gs.easing.Elastic;	import gs.easing.Expo;	import gs.easing.Linear;	import gs.easing.Quad;	import gs.easing.Quart;	import gs.easing.Quint;	import gs.easing.Sine;	import gs.easing.Strong;				public class EasingUtil	{		public function EasingUtil ( )		{		}								////////////////////////////////////////////////////////////////////////////////		//		// Public Methods		//		////////////////////////////////////////////////////////////////////////////////								public static function stringToFunction ( s : String ) : Function		{			var elements : Array = s.split ( "." ) ;			var className : String = elements[ 0 ] ;			var functionName : String = elements[ 1 ] ;			var f : Function ;						switch ( className )			{				case EasingClass.BACK :				{					f = Back[ functionName ] as Function ;					break ;				}				case EasingClass.BOUNCE :				{					f = Bounce[ functionName ] as Function ;					break ;				}				case EasingClass.CIRC :				{					f = Circ[ functionName ] as Function ;					break ;				}				case EasingClass.CUBIC :				{					f = Cubic[ functionName ] as Function ;					break ;				}				case EasingClass.ELASTIC :				{					f = Elastic[ functionName ] as Function ;					break ;				}				case EasingClass.EXPO :				{					f = Expo[ functionName ] as Function ;					break ;				}				case EasingClass.LINEAR :				{					f = Linear[ functionName ] as Function ;					break ;				}				case EasingClass.QUAD :				{					f = Quad[ functionName ] as Function ;					break ;				}				case EasingClass.QUART :				{					f = Quart[ functionName ] as Function ;					break ;				}				case EasingClass.QUINT :				{					f = Quint[ functionName ] as Function ;					break ;				}				case EasingClass.SINE :				{					f = Sine[ functionName ] as Function ;					break ;				}				case EasingClass.STRONG :				{					f = Strong[ functionName ] as Function ;					break ;				}				default :				{					f = Linear.easeNone ;					break ;				}			}						return f ;		}	}}