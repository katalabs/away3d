package away3d.graphs.bsp{	import away3d.graphs.bsp.BSPTree;	import away3d.core.math.Number3D;		/**	 * Rays to BSP geometry hittest	 * Ideal to build FPS game, where weapons need to check a hit, animate a missile or both...	 */ 	public final class BSPHitTest	{		private var _tree:BSPTree;		private var _intersect = new Number3D();				/**		 * Creates a new BSPHittest object.		 *		 * @param a BSPTree instance		 */		public function BSPHitTest(bspTree:BSPTree)		{			_tree = bspTree;		}				 /**		 * Finds the closest intersection along a segment with the BSP planes 		 * 		 * @param start The starting position (camera position for instance)		 * @param end The position (the camera position for instance)				 * @return A Number3D of the intersection. Null if no hit.		 */		 		public function getIntersectPosition(start:Number3D, end:Number3D):Number3D		{			if(_tree.traceCollision(start, end)){				var collisionRatio:Number = _tree.collisionRatio;				_intersect.x = start.x + collisionRatio*(end.x-start.x);				_intersect.y = start.y + collisionRatio*(end.y-start.y);				_intersect.z = start.z + collisionRatio*(end.z-start.z);				return _intersect;			}						return null;		}	}}