package away3d.animators{	import away3d.arcane;	import away3d.core.base.*;	import away3d.events.*;		import flash.display.*;	import flash.events.*;	import flash.utils.*;		use namespace arcane;		public class Animator extends EventDispatcher	{		private var _broadcaster:Sprite = new Sprite();		private var _startTime:Number;		private var _startEvent:AnimatorEvent;		private var _stopEvent:AnimatorEvent;				private function notifyStartEvent():void        {        	            if (!hasEventListener(AnimatorEvent.START))                return;			            if (!_startEvent)                _startEvent = new AnimatorEvent(AnimatorEvent.START, this);                        dispatchEvent(_startEvent);        }        		private function notifyStopEvent():void        {        	            if (!hasEventListener(AnimatorEvent.STOP))                return;			            if (!_stopEvent)                _stopEvent = new AnimatorEvent(AnimatorEvent.STOP, this);                        dispatchEvent(_stopEvent);        }        		private function _onEnterFrame(event:Event = null):void		{			update(_startTime + getTimer()/1000);		}				protected var _progress:Number = 0;		protected var _target:Object3D;        protected var _totalFrames:Number;                protected function updateTarget():void        {        	throw new Error("Not implemented");        }            	/**    	 * Represents the progress of the animation playhead from the start (0) to the end (1) of the animation.    	 */        public function get progress():Number        {            return _progress;        }                public function set progress(val:Number):void        {        	if (_progress == val)        		return;        	        	if (val < 0) {        		if (loop)					_progress = val % 1 + 1;				else					_progress = 0;			} else if (val >= 1) {				if (loop)					_progress = val % 1;				else					_progress = 1;			} else {				_progress = val;        	}        }                /**         * Defines the 3d object that the animation is applied to.         */        public function get target():Object3D        {            return _target;        }                public function set target(val:Object3D):void        {        	if (_target == val)        		return;        		        	_target = val;        	        	addEventListener(AnimatorEvent.START, _target.onAnimatorStart);        	addEventListener(AnimatorEvent.STOP, _target.onAnimatorStop);        				updateTarget();        }            	/**    	 * Defines the frames per second of the animation    	 */		public var fps:Number;		            	/**    	 * Defines whether the animation will loop. Defaults to true.    	 */		public var loop:Boolean;				/**		 * Defines the total length of the animation in seconds		 */        public function get length():Number        {            return _totalFrames/fps;		}        		public function set length(val:Number):void        {        	if (constantFps)        		_totalFrames = val*fps;        	else            	fps = _totalFrames/val;        }        		/**		 * Defines whether the animation interpolates between channel points. Defaults to true.		 */		public var interpolate:Boolean;				/**		 * Defines the start of the animation in seconds		 */        public var start:Number;                /**         * Defines whether a change in length should affect the frames per second (false) or totalFrames (true) of the animation. Defaults to true.         */        public var constantFps:Boolean;        		/**		 * Returns the total length of the animation in frames		 */        public function get totalFrames():Number        {            return _totalFrames;        }        		/**		 * Creates a new <code>Animator</code> object.		 */		public function Animator()		{			_progress = 0;						fps = 25;			loop = true;			interpolate = true;			start = Infinity;			constantFps = true;            _totalFrames = 0;		}		/**		 * Updates the position of the playhead to the given time in seconds.		 * 		 * @param	time	Defines the time in seconds of the playhead of the animation.		 */		public function update(time:Number):void		{			progress = (time - start)/length;		}				public function stop():void		{			notifyStopEvent();						_broadcaster.removeEventListener(Event.ENTER_FRAME, _onEnterFrame);						_onEnterFrame();		}				public function play():void		{			notifyStartEvent();						_startTime = _progress*length + start - getTimer()/1000;			_broadcaster.addEventListener(Event.ENTER_FRAME, _onEnterFrame);		}				public function gotoAndStop(frame:uint):void		{			notifyStopEvent();						update(frame/fps);						_broadcaster.removeEventListener(Event.ENTER_FRAME, _onEnterFrame);		}				public function gotoAndPlay(frame:uint):void		{			notifyStartEvent();						update(frame/fps);						_startTime = _progress*length + start - getTimer()/1000;			_broadcaster.addEventListener(Event.ENTER_FRAME, _onEnterFrame);		}				/**		 * Duplicates the animators properties to another <code>Animator</code> object		 * 		 * @param	animator	[optional]	The new animator instance into which all properties are copied		 * @return							The new animator instance with duplicated properties applied		 */        public function clone(animator:Animator = null):Animator        {            var anim:Animator = (animator as Animator) || new Animator();            anim.progress = _progress;            anim.fps = fps;            anim.loop = loop;            anim.interpolate = interpolate;            anim.start = start;            return anim;        }	}}